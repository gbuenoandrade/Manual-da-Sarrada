/* automato de sufixos com varias aplicacoes
	a implementacao abaixo supoe apenas variaveis minusculas inglesas, para modificar
	mude a struct state e os locais onde ha a subtracao "-a" 
	- construcao do automato O(N) tempo (ou O(NlogN) se usar set na struct state)
	- codigo da main acha a menor string (em ordem alfabetica) que nao aparece na entrada
			testado no problema http://www.spoj.com/problems/TAP2013E/
	- codigo eh similar para ver se uma string A eh substring da entrada, basta ver
		se ha o caminho no automato (uma BFS no automato)
*/

#include <stdio.h>
#include <string>
#include <string.h>
#include <queue>
 
#define MAXN 100000
 
using namespace std;
 
struct state {
    int len, link;
    int next[2];
};
 
state st[MAXN + MAXN];
int sz, last;
 
char s[MAXN];
int n;
int res;
 
void sa_init() {
    sz = last = 0;
    st[0].len = 0;
    st[0].link = -1;
    sz++;
 
    for (int i = 0; i < n + n; i++) {
        for (int j = 0; j < 2; j++) {
            st[i].next[j] = -1;
        }
    }
    return;
}
 
void sa_extend(char c) {
    int idx = c - '0'; // para letras maiusculas apenas
    int cur = sz++;
    st[cur].len = st[last].len + 1;
 
    int p;
    for (p = last; p != -1 && st[p].next[idx] == -1; p = st[p].link) {
        st[p].next[idx] = cur;
    }
    if (p == -1) {
        st[cur].link = 0;
    } else {
        int q = st[p].next[idx];
        if (st[p].len + 1 == st[q].len) {
            st[cur].link = q;
        } else {
            int clone = sz++;
            st[clone].len = st[p].len + 1;
            for (int j = 0; j < 2; j++) {
                st[clone].next[j] = st[q].next[j];
            }
            st[clone].link = st[q].link;
 
            for (; p != -1 && st[p].next[idx] == q; p = st[p].link) {
                st[p].next[idx] = clone;
            }
            st[q].link = st[cur].link = clone;
        }
    }
    last = cur;
}
 
void BFS(int pos) {
    int next;
    int len;
 
    queue <pair <int, int > > fila;
    fila.push(make_pair(pos, 0));
 
    while(!fila.empty()) {
        next = fila.front().first;
        len = fila.front().second;
        fila.pop();
 
        for (int i = 0; i < 2; i++) {
            if (st[next].next[i] == -1) {
                res = len + 1;
                return;
            } else {
                fila.push(make_pair(st[next].next[i], len + 1));
            }
        }
    }
    return;
}
 
int main(void) {
    int t;
 
    scanf(" %d", &t);
 
    while(t--) {
        scanf(" %s", s);
        n = strlen(s);
        sa_init();
        for (int i = 0; i < n; i++) {
            sa_extend(s[i]);
        }
        BFS(0);
        printf("%d\n", res);
    }
    return 0;
}
